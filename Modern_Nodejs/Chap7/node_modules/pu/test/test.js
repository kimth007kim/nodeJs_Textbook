#!/usr/bin/env node

"use strict";

process.env.test = true;

const fs = require("fs");
const path = require("path");

const isdir = fd => fs.statSync(fd).isDirectory();
const readdir = fd => fs.readdirSync(fd).filter(x => x[0] != ".").map(x => path.resolve(fd, x));

function getTestFiles(fd) {
	var files = [];
	readdir(fd).forEach(function(fn) {
		if (isdir(fn))
			files = files.concat(getTestFiles(fn));
		else if (fn.match(/\-test\.js$/i))
			files.push(fn);
	});
	return files;
}

const tests = getTestFiles(__dirname + "/../").map(function(fn) {
	return {
		name: path.parse(fn).name,
		scripts: require(fn)
	};
});

var success = 0,
	failed = 0;

function exec(index) {
	if (index >= tests.length) {
		console.log(`\n\x1b[2m${"=".repeat(30)}\x1b[0m\n\n\tSCRIPTS: \t\x1b[36m${tests.length}\x1b[0m\n\tSUCCESS: \t\x1b[36m${success}\x1b[0m\n\tFAILED: \t\x1b[36m${failed}\x1b[0m\n`);
		return;
	}
	var test = tests[index];
	console.log(`\n# ${index + 1} / ${tests.length}: ${test.name}\n\x1b[2m` + "=".repeat(30) + "\x1b[0m\n");
	var time = process.hrtime();
	test.scripts.run(function(ok, description) {
		if (ok) {
			success++;
			console.log(" \x1b[32m✔\x1b[0m " + description);
		} else {
			failed++;
			console.log(" \x1b[31m✖\x1b[0m " + description);
		}
	}, function(err) {
		if (err) {
			console.log("\n\x1b[31mFAILED\x1b[0m\n");
			console.error(err);
		} else {
			var elapse = process.hrtime(time);
			console.log(`\n\x1b[32mSUCCESS\x1b[0m (\x1b[36m${(elapse[0] * 1e9 + elapse[1]) / 1e6} ms\x1b[0m)`);
		}
		return exec(++index);
	});
}

exec(0);